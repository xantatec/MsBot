@inherits TemplatePage<MsBotModel<GroupMsgReqVo>>
@using MsBot.Implementation.MySql;
@using MsBot.Implementation.Template;
@using MsBot.Implementation.Template.Razor;
@using MsBot.Infrastructure;
@using MsBot.Vo.Events.Message;
@using Dapper;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Drawing;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.Formats.Png;
@using SixLabors.ImageSharp.PixelFormats;
@using SixLabors.ImageSharp.Processing;
@functions {
    private String SaveTempImage(string raw_message)
    {
        var imageName = Guid.NewGuid().ToString("N") + ".jpg";
        RequestHelper.Instance.DownloadFile(raw_message, Model.Config.ImageFolder, imageName);
        return imageName;
    }

    public IImageProcessingContext ConvertToAvatar(IImageProcessingContext processingContext, Size size, float cornerRadius)
    {
        return ApplyRoundedCorners(processingContext.Resize(new ResizeOptions
            {
                Size = size,
                Mode = ResizeMode.Crop
            }), cornerRadius);
    }

    private IImageProcessingContext ApplyRoundedCorners(IImageProcessingContext ctx, float cornerRadius)
    {
        var size = ctx.GetCurrentSize();
        IPathCollection corners = BuildCorners(size.Width, size.Height, cornerRadius);

        var graphicOptions = new DrawingOptions
            {
                GraphicsOptions = new GraphicsOptions
                {
                    // enforces that any part of this shape that has color is punched out of the background
                    AlphaCompositionMode = PixelAlphaCompositionMode.DestOut
                }
            };
        // mutating in here as we already have a cloned original
        // use any color (not Transparent), so the corners will be clipped
        return ctx.Fill(graphicOptions, Color.LimeGreen, corners);
    }

    private static IPathCollection BuildCorners(int imageWidth, int imageHeight, float cornerRadius)
    {
        // first create a square
        var rect = new RectangularPolygon(-0.5f, -0.5f, cornerRadius, cornerRadius);

        // then cut out of the square a circle so we are left with a corner
        IPath cornerTopLeft = rect.Clip(new EllipsePolygon(cornerRadius - 0.5f, cornerRadius - 0.5f, cornerRadius));

        // corner is now a corner shape positions top left
        //lets make 3 more positioned correctly, we can do that by translating the orgional artound the center of the image

        float rightPos = imageWidth - cornerTopLeft.Bounds.Width + 1;
        float bottomPos = imageHeight - cornerTopLeft.Bounds.Height + 1;

        // move it across the width of the image - the width of the shape
        IPath cornerTopRight = cornerTopLeft.RotateDegree(90).Translate(rightPos, 0);
        IPath cornerBottomLeft = cornerTopLeft.RotateDegree(-90).Translate(0, bottomPos);
        IPath cornerBottomRight = cornerTopLeft.RotateDegree(180).Translate(rightPos, bottomPos);

        return new PathCollection(cornerTopLeft, cornerBottomLeft, cornerTopRight, cornerBottomRight);
    }


    private string ThrowSomeone(string headImg)
    {
        var sourceFilePath = System.IO.Path.Combine(Model.Config.ImageFolder, "img/throw.jpg");
        var waterFilePath = System.IO.Path.Combine(Model.Config.ImageFolder, headImg);
        var uuid = Guid.NewGuid().ToString("N");

        using(var sourceImage = Image.Load(sourceFilePath))
        {
            using(var waterImage = Image.Load(waterFilePath).Clone(new Configuration(new PngConfigurationModule()), x =>
              {
                  ConvertToAvatar(x.Resize(148, 148), new Size(148, 148), 90);
              }))
            {
                sourceImage.Mutate(x =>
                {
                    x.DrawImage(waterImage, new Point(13, 175), 1);
                });
                var targetFileName = Model.Config.ImageFolder + uuid + ".jpg";
                sourceImage.SaveAsJpeg(targetFileName);
                return "[CQ:image,file=" + uuid + ".jpg]";
            }
        }
    }

    private GroupMsgRspVo GetResult()
    {
        var request = Model.Request;
        var config = Model.Config;
        var rawMsg = Model.Request.RawMessage;


        int aIndex = rawMsg.IndexOf("[CQ:at,qq=") + 10;
        int bIndex = rawMsg.IndexOf("]");
        var findNumber = rawMsg.Substring(aIndex, bIndex - aIndex);
        var result = new GroupMsgRspVo { };
        if(rawMsg.Contains("别") || rawMsg.Contains("不") || rawMsg.Contains("怎么") || rawMsg.Contains("禁止"))
        {
            result.AtSender = true;
            result.Reply = "[CQ:image,file=img/buzhidao5.jpg]";
            return result;
        }
        var throwSomeone = "";
        if(config.BotMaster.Contains(findNumber))
        {
            var saveTempImage = SaveTempImage("http://q1.qlogo.cn/g?b=qq&nk=" + request.UserId + "&s=3");
            throwSomeone = ThrowSomeone(saveTempImage);
            result.AtSender = false;
            result.Reply = "[CQ:at,qq=" + request.UserId + "]" + throwSomeone;
        }
        else
        {
            String saveTempImage = SaveTempImage("http://q1.qlogo.cn/g?b=qq&nk=" + findNumber + "&s=3");
            throwSomeone = ThrowSomeone(saveTempImage);
            result.AtSender = false;
            result.Reply = "[CQ:at,qq=" + findNumber + "]" + throwSomeone;
        }
        return result;
    }
}
@SetResult(GetResult())