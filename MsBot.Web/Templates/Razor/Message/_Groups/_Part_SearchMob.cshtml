@inherits TemplatePage<MsBotModel<GroupMsgReqVo>>
@using MsBot.Implementation.MySql;
@using MsBot.Implementation.Template;
@using MsBot.Implementation.Template.Razor;
@using MsBot.Vo.Events.Message;
@using System.Text.RegularExpressions;
@using MsBot.Infrastructure;
@using Dapper;
@using System.Text;
@functions {
    public class MobName
    {
        public long Id { get; set; }
        public string MobId { get; set; }
        public string Name { get; set; }
    }
    public class MobInfo
    {
        public long id { get; set; }
        public String mob_id { get; set; }
        public String level { get; set; }
        public String max_hp { get; set; }
        public String max_mp { get; set; }
        public String speed { get; set; }
        public String pa_damage { get; set; }
        public String ma_damage { get; set; }
        public String pd_rate { get; set; }
        public String md_rate { get; set; }
        public String acc { get; set; }
        public String eva { get; set; }
        public String pushed { get; set; }
        public String fs { get; set; }
        public String exp { get; set; }
        public String summer_type { get; set; }
        public String category { get; set; }
        public String elem_attr { get; set; }
        public String mob_type { get; set; }
        public String boss { get; set; }
        public String link { get; set; }
    }

    private GroupMsgRspVo GetResult()
    {
        var rawMsg = Model.Request.RawMessage;
        rawMsg = Regex.Replace(rawMsg, "&#91;", "[");
        rawMsg = Regex.Replace(rawMsg, "&#93;", "]");
        using(var conn = DbHelper.Instance.GetConnection(Model.Config.ConnectionString))
        {
            var mobNameList = conn.Query<MobName>("SELECT id, mob_id, [name] FROM mob_name WHERE name = @Name order by mob_id", new
            {
                Name = rawMsg
            }).ToList();

            var sb = new StringBuilder();
            if(!mobNameList.Any())
            {
                return new GroupMsgRspVo
                    {
                        AtSender = false,
                        Reply = "没有查询到怪物信息"
                    };
            }
            var j = 0;
            foreach(var mobName in mobNameList)
            {
                var mobInfo = conn.QueryFirstOrDefault<MobInfo>("SELECT * FROM mob_info WHERE mob_id = @MobId", new
                {
                    MobId = mobName.MobId
                });

                if(!string.IsNullOrEmpty(mobInfo.link))
                {
                    var url = Path.Combine(Model.Config.ImageFolder, "result_img", mobInfo.link + ".img", mobInfo.link + ".img");
                    var fi = new FileInfo(url);
                    if(fi.Exists)
                    {
                        sb.Append("[CQ:image,file=result_img/")
                            .Append(mobInfo.link)
                            .Append(".img/")
                            .Append(mobInfo.link)
                            .Append(".img/")
                            .Append(fi.Name)
                            .Append("]");
                        break;
                    }
                }

                var imgUrl = Model.Config.ImageFolder + "result_img/" + mobName.MobId + ".img/" + mobName.MobId + ".img";
                var imgFi = new FileInfo(imgUrl);
                if(imgFi.Exists)
                {
                    sb.Append("[CQ:image,file=result_img/")
                            .Append(mobName.MobId)
                            .Append(".img/")
                            .Append(mobName.MobId)
                            .Append(".img/")
                            .Append(imgFi.Name)
                            .Append("]");
                    break;
                }
                j++;
            }

            if(j == mobNameList.Count)
                j = 0;

            var fMob = conn.QueryFirstOrDefault<MobInfo>("SELECT * FROM mob_info WHERE mob_id = @MobId", new
            {
                MobId = mobNameList[j].MobId
            });

            sb.Append(Environment.NewLine).Append(mobNameList[j].Name).Append("(").Append(mobNameList[j].MobId).Append(")");
            if(fMob.boss == null)
                sb.Append(Environment.NewLine).Append("怪物类型:普通怪");
            else
                sb.Append(Environment.NewLine).Append("怪物类型:首领怪");
            sb.Append(Environment.NewLine)
            .Append("等级:").Append(fMob.level).Append(Environment.NewLine)
            .Append("血量:").Append(fMob.max_hp).Append(Environment.NewLine)
            //				.append("蓝量:").append(mobInfo.getMaxMp()).append(Environment.NewLine)
            .Append("防御:").Append(fMob.pd_rate).Append("%\r\n")
            //				.append("魔法防御:").append(mobInfo.getMdRate()).append("%\r\n")
            //				.append("移动速度:").append(mobInfo.getSpeed()).append(Environment.NewLine)
            //				.append("击退伤害:").append(mobInfo.getPushed()).append(Environment.NewLine)
            .Append("经验:").Append(fMob.exp).Append(Environment.NewLine)
            .Append("冰雷火毒圣暗物").Append(Environment.NewLine);
            if(fMob.elem_attr == null)
                sb.Append("○○○○○○○");
            else
            {
                var attr = fMob.elem_attr;
                var attrMap = new Dictionary<String, String>();
                attrMap.Add("I", "○");
                attrMap.Add("L", "○");
                attrMap.Add("F", "○");
                attrMap.Add("S", "○");
                attrMap.Add("H", "○");
                attrMap.Add("D", "○");
                attrMap.Add("P", "○");
                int index = 0;
                while(index < attr.Length)
                {
                    if(attr.Substring(index + 1, 1) == "1")
                    {
                        attrMap.Add(attr.Substring(index, 1), "×");
                    }
                    else if(attr.Substring(index + 1, 1) == "2")
                    {
                        attrMap.Add(attr.Substring(index, 1), "△");
                    }
                    else if(attr.Substring(index + 1, 1) == "3")
                    {
                        attrMap.Add(attr.Substring(index, 1), "◎");
                    }
                    index += 2;
                }
                sb.Append(attrMap["I"])
                .Append(attrMap["L"])
                .Append(attrMap["F"])
                .Append(attrMap["S"])
                .Append(attrMap["H"])
                .Append(attrMap["D"])
                .Append(attrMap["P"]);
            }
            var result = new GroupMsgRspVo { AtSender = true };

            if(mobNameList.Count >= 2)
            {
                result.Reply = "查询到同名的怪物有：";
                result.Reply += Environment.NewLine + string.Join(Environment.NewLine, mobNameList.Select(mn => mn.Name + "(" + mn.MobId + ")"));
            }
        }


        GroupMsg groupMsg = new GroupMsg();
        groupMsg.setGroup_id(Long.parseLong(group_id));
        groupMsg.setMessage(reply.toString());
        groupMsgService.sendGroupMsg(groupMsg);

        if(mobNameList.size() >= 2)
        {
            String reply2 = "查询到同名怪物有：";
            for(MobName mn : mobNameList)
            {
                reply2 = reply2 + "\r\n" + mn.getName() + "(" + mn.getMobId() + ")";
            }
            GroupMsg groupMsg2 = new GroupMsg();
            groupMsg2.setGroup_id(Long.parseLong(group_id));
            groupMsg2.setMessage(reply2);
            groupMsgService.sendGroupMsg(groupMsg2);
        }

        List<MobName> mobNameLikeList = mobNameRepository.findByNameLike(rawMsg);
        mobNameLikeList.removeAll(mobNameList);
        System.out.println("相似的结果量" + mobNameLikeList.size());
        String reply3 = "查询到相似的怪物有：";
        if(mobNameLikeList.size() == 0)
        {
            reply3 = "查询到相似的怪物有：null";
            return null;
        }
        else if(mobNameLikeList.size() < 10)
        {
            for(MobName mn : mobNameLikeList)
            {
                reply3 = reply3 + "\r\n" + mn.getName() + "(" + mn.getMobId() + ")";
            }
        }
        else
        {
            reply3 = "查询到相似的怪物有：查询结果超过10条，为防止刷屏，已将结果私聊于您。";
            int k = 0;
            String pReply = "";
            while(mobNameLikeList.size() > 0)
            {
                MobName remove = mobNameLikeList.remove(0);
                pReply = pReply + remove.getName() + "(" + remove.getMobId() + ")" + "\r\n";
                k++;
                if(k == 10)
                {
                    PrivateMsg privateMsg = new PrivateMsg();
                    privateMsg.setUser_id(Long.parseLong(user_id));
                    privateMsg.setMessage(pReply);
                    groupMsgService.sendPrivateMsg(privateMsg);
                    pReply = "";
                    k = 0;
                }
            }
            if(!pReply.equals(""))
            {
                PrivateMsg privateMsg = new PrivateMsg();
                privateMsg.setUser_id(Long.parseLong(user_id));
                privateMsg.setMessage(pReply);
                groupMsgService.sendPrivateMsg(privateMsg);
            }
        }
        GroupMsg groupMsg3 = new GroupMsg();
        groupMsg3.setGroup_id(Long.parseLong(group_id));
        groupMsg3.setMessage(reply3);
        groupMsgService.sendGroupMsg(groupMsg3);
        return null;
    }
}
@SetResult(GetResult())