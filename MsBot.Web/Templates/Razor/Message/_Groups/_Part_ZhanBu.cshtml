@inherits TemplatePage<MsBotModel<GroupMsgReqVo>>
@using MsBot.Implementation.MySql;
@using MsBot.Implementation.Template;
@using MsBot.Implementation.Template.Razor;
@using MsBot.Infrastructure;
@using MsBot.Vo.Events.Message;
@using Dapper;
@using System.Drawing;
@using System.Drawing.Drawing2D;
@using System.Drawing.Imaging;
@functions {
    private String SaveTempImage(string raw_message)
    {
        var imageName = Guid.NewGuid().ToString("N") + ".jpg";
        RequestHelper.Instance.DownloadFile(raw_message, Model.Config.ImageFolder, imageName);
        return imageName;
    }

    private Bitmap PicResize(Image sourceImage, int width, int height)
    {
        var resizeBmp = new Bitmap(width, height);
        var g = Graphics.FromImage(resizeBmp);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.SmoothingMode = SmoothingMode.HighQuality;
        g.CompositingQuality = CompositingQuality.HighQuality;
        g.SmoothingMode = SmoothingMode.AntiAlias;
        g.DrawImage(sourceImage, new Rectangle(0, 0, width, height), new Rectangle(0, 0, sourceImage.Width, sourceImage.Height), GraphicsUnit.Pixel);
        g.Dispose();
        return resizeBmp;
    }

    public void DrawImage(Bitmap modifyImage, Bitmap drawedImage, int x, int y, string targetFilePath)
    {
        Graphics g = null;
        try
        {
            g = Graphics.FromImage(modifyImage);

            //设置颜色矩阵
            float[][] matrixItems =
            {
                new float[] {1, 0, 0, 0, 0},
                new float[] {0, 1, 0, 0, 0},
                new float[] {0, 0, 1, 0, 0},
                new float[] {0, 0, 0, 1f, 0},
                new float[] {0, 0, 0, 0, 1}
            };

            ColorMatrix colorMatrix = new ColorMatrix(matrixItems);
            ImageAttributes imgAttr = new ImageAttributes();
            imgAttr.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);

            g.DrawImage(//绘制阴影图像
             drawedImage,
             new Rectangle(x, y, drawedImage.Width, drawedImage.Height),
             0, 0, drawedImage.Width, drawedImage.Height,
             GraphicsUnit.Pixel, imgAttr);

            modifyImage.Save(targetFilePath, ImageFormat.Jpeg);
            modifyImage.Dispose();
            drawedImage.Dispose();
            g.Dispose();
        }
        finally
        {
            try
            {
                drawedImage.Dispose();
                modifyImage.Dispose();
                g.Dispose();
            }
            catch { }
        }
    }

    public class LuckyTable
    {
        public long Id { get; set; }
        public string Lucky_Star { get; set; }
        public string Lucky_Table { get; set; }
        public string Lucky_Thing { get; set; }
    }

    public class LuckyThing
    {
        public long Id { get; set; }
        public string Good { get; set; }
        public string Good_Thing { get; set; }
        public string Bad { get; set; }
        public string Bad_Thing { get; set; }
    }

    public class LuckyMap
    {
        public long Id { get; set; }
        public string Map { get; set; }
        public string Map_Url { get; set; }
    }

    public string ZbImage(Dictionary<String, String> map)
    {
        using(var buffImg = new Bitmap(500, 500, PixelFormat.Format32bppArgb))
        {
            using(var g = Graphics.FromImage(buffImg))
            {
                var brush = new SolidBrush(Color.White);
                var font = new Font("Cascadia Code", 12);
                g.FillRectangle(brush, 0, 0, 500, 500); //填充整个屏幕
                brush.Dispose();
                brush = new SolidBrush(Color.Black);
                g.DrawImage(buffImg, 32, 32, buffImg.Width, buffImg.Height);
                g.DrawString(map["name"], font, brush, 32, 24);
                g.DrawString(map["star"], font, brush, 32, 24 * 2);
                g.DrawString(map["ch"], font, brush, 32, 24 * 3);
                g.DrawString(map["table"], font, brush, 32, 24 * 4);
                g.DrawString("//-------------------//", font, brush, 32, 24 * 5);

                var split = map["gThing"].Split('\n');

                g.DrawString(split[0], font, brush, 32, 24 * 6);
                g.DrawString(split[1], font, brush, 32, 24 * 7);
                g.DrawString("//-------------------//", font, brush, 32, 24 * 8);
                split = map["bThing"].Split('\n');
                g.DrawString(split[0], font, brush, 32, 24 * 9);
                g.DrawString(split[1], font, brush, 32, 24 * 10);
                g.DrawString("//-------------------//", font, brush, 32, 24 * 11);
                g.DrawString("今日最佳玄学地图是：", font, brush, 32, 24 * 12);
                g.DrawString(map["map"], font, brush, 32, 24 * 13);
                var mapUrl = map["mapUrl"];


                mapUrl = mapUrl.Substring(mapUrl.IndexOf("save"), mapUrl.Length - 1 - mapUrl.IndexOf("save"));
                var mapFilePath = Model.Config.ImageFolder + mapUrl;
                mapFilePath = mapFilePath.Replace("\\", "/");
                var mapFile = new Bitmap(mapFilePath);
                mapFile = PicResize(mapFile, 220, 150);
                var uuid = Guid.NewGuid().ToString("N");
                var saveFilePath = Model.Config.ImageFolder + uuid + ".png";
                DrawImage(buffImg, mapFile, 270, 24 * 13 + 10, saveFilePath);
                brush.Dispose();
                return "[CQ:image,file=" + uuid + ".jpg]";
            }
        }
    }

    /// <summary>
    /// 指数
    /// </summary>
    private String LuckyRank(int i)
    {
        if(i < 5)
            return "★☆☆☆☆";
        else if(i < 10)
            return "★★☆☆☆";
        else if(i < 45)
            return "★★★☆☆";
        else if(i < 80)
            return "★★★★☆";
        else
            return "★★★★★";
    }

    /// <summary>
    ///指数
    /// </summary>
    private String LuckyRank2(int i)
    {
        if(i < 5)
            return "1";
        else if(i < 10)
            return "2";
        else if(i < 45)
            return "3";
        else if(i < 80)
            return "4";
        else
            return "5";
    }

    public string MsgZb(long numb)
    {
        var now = DateTime.Now;
        var day = now.Day;
        var week = (int)now.DayOfWeek;

        int i = Math.Abs((numb + day + week).GetHashCode() % 97);
        int j = Math.Abs((numb + week + day).GetHashCode() % 20) + 1;
        int k = Math.Abs((day + numb + week).GetHashCode());
        int l = Math.Abs((week + numb + day).GetHashCode());
        int m = Math.Abs((day + week + numb).GetHashCode());
        int n = Math.Abs((week + day + numb).GetHashCode());
        /**
         * i 运势
         * j 频道
         * i运势算n标签
         * k 宜
         * l 忌
         * m 地图
         */
        var lucky = LuckyRank2(i);
        using(var conn = DbHelper.Instance.GetConnection(Model.Config.ConnectionString))
        {
            var sql = "SELECT COUNT(1) FROM lucky_table WHERE lucky_star = @LuckStar";
            var count = conn.ExecuteScalar<int>(sql, new { LuckStar = lucky });
            n %= count;

            sql = "SELECT * FROM lucky_table WHERE lucky_star = @LuckStar LIMIT @N,1";
            var lt = conn.QueryFirstOrDefault<LuckyTable>(sql, new { LuckStar = lucky, N = n });
            var luckyTable = lt.Lucky_Table;

            var count2 = conn.ExecuteScalar<int>("SELECT COUNT(1) FROM lucky_thing");
            k %= count2;
            l %= count2;
            while(l == k)
                l = (l + 1) % count2;

            sql = "SELECT * FROM lucky_thing LIMIT @N,1";
            var lgt = conn.QueryFirstOrDefault<LuckyThing>(sql, new { N = l });
            var lbt = conn.QueryFirstOrDefault<LuckyThing>(sql, new { N = k });
            var luckyThing = "宜：" + lgt.Good + "\r\n" + lgt.Good_Thing;
            var luckyBdThing = "忌：" + lbt.Bad + "\r\n" + lbt.Bad_Thing;

            var count3 = conn.ExecuteScalar<int>("SELECT COUNT(*) FROM lucky_map");
            m %= count3;
            sql = "SELECT * FROM lucky_map LIMIT @N,1";
            var lm = conn.QueryFirstOrDefault<LuckyMap>(sql, new { N = m });
            var luckMap = lm.Map_Url + lm.Map;
            return "\r\n" + "您今日的运势指数为" + LuckyRank(i) + "\r\n"
                 + "运势最好的频道是" + j + "频道哦！" + "\n"
                 + luckyTable + "\r\n"
                 + "//-------------------//" + "\r\n"
                 + luckyThing + "\r\n"
                 + "//-------------------//" + "\r\n"
                 + luckyBdThing + "\r\n"
                 + "//-------------------//" + "\r\n"
                 + "今日最佳玄学地图是" + "\r\n"
                 + luckMap + "\r\n"
                 + "//-------------------//";
        }
    }

    public string MsgZb(long numb, String name)
    {
        var now = DateTime.Now;
        var day = now.Day;
        var week = (int)now.DayOfWeek;

        int i = Math.Abs((numb + day + week).GetHashCode() % 97);
        int j = Math.Abs((numb + week + day).GetHashCode() % 20) + 1;
        int k = Math.Abs((day + numb + week).GetHashCode());
        int l = Math.Abs((week + numb + day).GetHashCode());
        int m = Math.Abs((day + week + numb).GetHashCode());
        int n = Math.Abs((week + day + numb).GetHashCode());
        /**
             * i 运势
             * j 频道
             * i运势算n标签
             * k 宜
             * l 忌
             * m 地图
             */
        var lucky = LuckyRank2(i);
        using(var conn = DbHelper.Instance.GetConnection(Model.Config.ConnectionString))
        {
            var sql = "SELECT COUNT(1) FROM lucky_table WHERE lucky_star = @LuckStar";
            var count = conn.ExecuteScalar<int>(sql, new { LuckStar = lucky });

            n = n % count;

            sql = "SELECT * FROM lucky_table WHERE lucky_star = @LuckStar LIMIT @N,1";
            var lt = conn.QueryFirstOrDefault<LuckyTable>(sql, new { LuckStar = lucky, N = n });
            var luckyTable = lt.Lucky_Table;

            var count2 = conn.ExecuteScalar<int>("SELECT COUNT(1) FROM lucky_thing");
            k %= count2;
            l %= count2;
            while(l == k)
                l = (l + 1) % count2;

            sql = "SELECT * FROM lucky_thing LIMIT @N,1";
            var lgt = conn.QueryFirstOrDefault<LuckyThing>(sql, new { N = l });
            var lbt = conn.QueryFirstOrDefault<LuckyThing>(sql, new { N = k });
            var luckyThing = "宜：" + lgt.Good + "\r\n" + lgt.Good_Thing;
            var luckyBdThing = "忌：" + lbt.Bad + "\r\n" + lbt.Bad_Thing;

            var count3 = conn.ExecuteScalar<int>("SELECT COUNT(*) FROM lucky_map");
            m %= count3;
            sql = "SELECT * FROM lucky_map LIMIT @N,1";
            var lm = conn.QueryFirstOrDefault<LuckyMap>(sql, new { N = m });

            var map = new Dictionary<String, String>();
            map.Add("name", name);
            map.Add("star", "您今日的运势指数为" + LuckyRank(i));
            map.Add("ch", "运势最好的频道是" + j + "频道哦！");
            map.Add("table", luckyTable);
            map.Add("gThing", luckyThing);
            map.Add("bThing", luckyBdThing);
            map.Add("map", lm.Map);
            map.Add("mapUrl", lm.Map_Url);
            return ZbImage(map);
        }
    }

    private GroupMsgRspVo GetResult()
    {
        var reply = MsgZb(Model.Request.UserId, Model.Request.Sender.NickName);
        return new GroupMsgRspVo { Reply = reply, AtSender = true };
    }
}
@SetResult(GetResult())