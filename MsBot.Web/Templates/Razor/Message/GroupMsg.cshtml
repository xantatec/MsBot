@inherits TemplatePage<MsBotModel<GroupMsgReqVo>>
@using MsBot.Implementation.API;
@using MsBot.Implementation.MySql;
@using MsBot.Implementation.Template;
@using MsBot.Implementation.Template.Razor;
@using MsBot.Infrastructure;
@using MsBot.Vo.API;
@using MsBot.Vo.Events.Message;
@using Dapper;
@using System.Threading;
@functions {
    public class Msg
    {
        public long Id { get; set; }
        public string Answer { get; set; }
        public string Question { get; set; }
        public string CreateId { get; set; }
        public string Link { get; set; }
    }

    public static int GetMsgResult(string A, string B)
    {
        if(A == B)
            return 0;

        //dp[i][j]表示源串A位置i到目标串B位置j处最低需要操作的次数
        var dp = new int[A.Length + 1, B.Length + 1];
        for(int i = 1; i <= A.Length; i++)
            dp[i, 0] = i;
        for(int j = 1; j <= B.Length; j++)
            dp[0, j] = j;
        for(int i = 1; i <= A.Length; i++)
        {
            for(int j = 1; j <= B.Length; j++)
            {
                if(A[i - 1] == B[j - 1])
                    dp[i, j] = dp[i - 1, j - 1];
                else
                    dp[i, j] = Math.Min(dp[i - 1, j] + 1, Math.Min(dp[i, j - 1] + 1, dp[i - 1, j - 1] + 1));
            }
        }
        return dp[A.Length, B.Length];
    }

    public bool SimilarSearch()
    {
        var request = Model.Request;
        var config = Model.Config;
        var rawMsg = request.RawMessage;

        List<Msg> list = null;
        var rep = new List<Msg>();
        var command = rawMsg.Substring(config.BotName.Length).Trim();
        using(var conn = DbHelper.Instance.GetConnection(config.ConnectionString))
        {
            list = conn.Query<Msg>("SELECT * FROM msg WHERE question LIKE CONCAT('%', @Question,'%')", new { Question = command }).ToList();
        }

        if(list.Count > 0)
        {
            //默认相似度
            var similar = 100;
            //遍历list
            foreach(Msg tempMsg in list)
            {
                //查看相似度
                int similarity = GetMsgResult(tempMsg.Question, command);
                //比较相似度 如果更相似 放入变量
                if(similarity < similar)
                {
                    similar = similarity;
                    rep.Clear();
                    rep.Add(tempMsg);
                }
                if(similarity == similar)
                {
                    rep.Add(tempMsg);
                }
            }
            var random = RandomHelper.Instance.RandomInt(rep.Count);
            var msg2 = rep[random];
            var result = new GroupMsgRspVo();
            if(msg2.Link == null)
            {
                result.Reply = msg2.Answer;
                Write(SetResult(result));
            }
            else
            {
                var groupMsg = new GroupMessageReqVo { GroupId = request.GroupId, AutoEscape = false };

                groupMsg.Message = msg2.Answer;
                APIHelper.Instance.SendGroupMsg(groupMsg);
                var split = msg2.Link.Split("#abcde#");
                foreach(var temp in split)
                {
                    groupMsg.Message = temp;
                    APIHelper.Instance.SendGroupMsg(groupMsg);
                }
            }
            return true;
        }
        return false;
    }

    public async void GetResult()
    {
        var request = Model.Request;
        var config = Model.Config;
        var rawMsg = request.RawMessage;

        //1MIN一个计数，缓存30MIN
        var dt = DateTime.Now;
        var cacheGpMsgKey = string.Format("_GROUP_MSG_{0}_{1}", request.GroupId, dt.ToString("HHmm"));

        //群消息缓存设计
        CacheHelper.Instance.TryGet<int>(cacheGpMsgKey, out var groupMsgCount);
        groupMsgCount += 1;
        CacheHelper.Instance.Set(cacheGpMsgKey, groupMsgCount, 1 * 60);

        if(!rawMsg.StartsWith(config.BotName))
            return;

        if(rawMsg.Contains("逆推"))
        {
            await IncludeAsync("Message/_Groups/_Part_NiTui", Model);
            return;
        }
        if(rawMsg.ToLower().Contains("roll"))
        {
            await IncludeAsync("Message/_Groups/_Part_RollDian", Model);
            return;
        }
        if(
            rawMsg.StartsWith(config.BotName + "学习")
            &&
            config.BotMaster.Contains(request.UserId.ToString())
            &&
            rawMsg.Contains("答")
        )
        {
            if(rawMsg.Contains("布尔问"))
            {
                await IncludeAsync("Message/_Groups/_Part_Study_Bool", Model);
                return;
            }
            else if(rawMsg.Contains("正则问"))
            {
                await IncludeAsync("Message/_Groups/_Part_Study_Regex", Model);
                return;
            }
            else if(rawMsg.Contains("问"))
            {
                await IncludeAsync("Message/_Groups/_Part_Study_Normal", Model);
                return;
            }
        }
        if(
            (rawMsg.StartsWith(config.BotName + "查询") || rawMsg.StartsWith(config.BotName + " 查询"))
            &&
            config.BotMaster.Contains(request.UserId.ToString())
        )
        {
            await IncludeAsync("Message/_Groups/_Part_SearchQuestion", Model);
            return;
        }
        if(
            (rawMsg.StartsWith(config.BotName + "删除问题") || rawMsg.StartsWith(config.BotName + " 删除问题"))
            &&
            config.BotMaster.Contains(request.UserId.ToString())
        )
        {
            await IncludeAsync("Message/_Groups/_Part_DeleteQuestion", Model);
            return;
        }
        if(rawMsg.StartsWith(config.BotName + "怪物") || rawMsg.StartsWith(config.BotName + " 怪物"))
        {
            await IncludeAsync("Message/_Groups/_Part_SearchMob", Model);
            return;
        }
        if(rawMsg.Contains("无视") && (rawMsg.Contains("+") || rawMsg.Contains("-")))
        {
            await IncludeAsync("Message/_Groups/_Part_WuShiCalc", Model);
            return;
        }
        if(rawMsg.Contains("复读机周报"))
        {
            await IncludeAsync("Message/_Groups/_Part_FuDuJiZhouBao", Model);
            return;
        }
        if(rawMsg.StartsWith(config.BotName + "扔") && rawMsg.Contains("[CQ:at"))
        {
            await IncludeAsync("Message/_Groups/_Part_Reng", Model);
            return;
        }
        if((rawMsg.StartsWith(config.BotName + "揍") || rawMsg.StartsWith(config.BotName + "打")) && rawMsg.Contains("[CQ:at"))
        {
            await IncludeAsync("Message/_Groups/_Part_Zou", Model);
            return;
        }
        if(rawMsg.StartsWith(config.BotName + "官网") || rawMsg.StartsWith(config.BotName + " 官网"))
        {
            await IncludeAsync("Message/_Groups/_Part_GuanWang", Model);
            return;
        }
        if(
            rawMsg.StartsWith(config.BotName + "抽签")
            ||
            rawMsg.StartsWith(config.BotName + "运势")
            ||
            rawMsg.StartsWith(config.BotName + "占卜")
        )
        {
            await IncludeAsync("Message/_Groups/_Part_ZhanBu", Model);
            return;
        }
        if(rawMsg.Contains("x") || rawMsg.Contains("+") || rawMsg.Contains("-") || rawMsg.Contains("*") || rawMsg.Contains("/") || rawMsg.Contains("÷"))
        {
            await IncludeAsync("Message/_Groups/_Part_Calc", Model);
            return;
        }

        var hasHit = SimilarSearch();
        if(hasHit)
            return;

        //随机回复
        var rnd = RandomHelper.Instance.RandomInt(1, 5);
        Write(SetResult(new GroupMsgRspVo { Reply = "[CQ:image,file=img/buzhidao" + (rnd < 3 ? rnd + ".gif]" : rnd + ".png]") }));
    }
}
@{
    try
    {
        GetResult();
    }
    catch(Exception ex)
    {
        if(Model.Request.UserId == 337497085)
            SetResult(new GroupMsgRspVo { Reply = "！！！慕容王想害我！" });
        else
            SetResult(new GroupMsgRspVo { Reply = "头哥！报错啦：\r\n" + ex.Message });
    }
}